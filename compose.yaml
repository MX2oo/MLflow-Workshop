version: "1"
services:
  s3:
    image: minio/minio
    container_name : minio_mlflow
    restart: always
    volumes :
    - ./minio_data:/data

    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    networks:
      - MLTracking
      # - backend  
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_ADDRESS=${MINIO_ADDRESS}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_STORAGE_USE_HTTPS=${MINIO_STORAGE_USE_HTTPS}
      - MINIO_CONSOLE_ADDRESS=${MINIO_CONSOLE_ADDRESS}
    command: server /data #--console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval : 30s
      timeout : 20s
      retries : 3

  mlflow:
    image: mlflow/mlflow:2.12.1
    container_name : mlflow
    ports:
      - ${MLFLOW_PORT}:5000  
    networks:
      - MLTracking
      - backend 
    environment:
    - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
    - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY}
    - MLFLOW_S3_ENDPOINT_URL=http://s3:${MINIO_PORT}
    - MLFLOW_S3_IGNORE_TLS=true

    command : mlflow server --serve-artifacts --artifacts-destination s3://${MLFLOW_BUCKET_NAME}/ --host 0.0.0.0
              --backend-store-uri postgresql://${PG_USER}:${PG_PASSWORD}@db:${PG_PORT}/${PG_DATABASE} 


  db:
    restart : always
    image : postgres
    container_name : mlflow_pg
    expose :
      - "${PG_PORT}"
    ports: 
      -  5432:5432  
    networks:
      - backend
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_DATABASE=${PG_DATABASE}
    volumes:
      - ./db_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD", "pg_isready", "-p", "${PG_PORT}", "-U", "${PG_USER}"]
      interval: 5s
      timeout: 5s
      retries: 3      
                  
networks:
  MLTracking:
    driver: bridge
  backend:
    driver: bridge
  
    


